package main

/*
https://www.nowcoder.com/practice/5a04a774b9f54d9eb783a4d583e7a60a

给定一个整数n，求由“0”字符和“1”字符组成的长度为n的所有字符串中，满足“0”字符的左边必有“1”字符的字符串的数量。

示例1
输入：1
输出：1
说明：只有“1”满足

示例2
输入：2
输出：2
说明：只有“10”和“11”满足

示例3
输入：3
输出：3
说明：只有“101”，“110”，“111”满足

思路：
1
10	11
101	110	111

f(i) = f(i-1) + f(i-2)

f(i-1)是上一层的每个数字左边加上一个1，一定符合
f(i-2)是上上一层每个数字左边加上10 一定符合
这两部分不会有重复，因为上一层中不包括上上一层左边是0的
*/
func countMustHave1In0Left(n int) int {
	if n == 1 || n == 2 {
		return n
	}
	dp := make([]int, n)
	dp[0] = 1
	dp[1] = 2

	for i := 2; i <= n-1; i++ {
		dp[i] = dp[i-1] + dp[i-2]
	}
	return dp[n-1]
}
